package info.goodline.starsandplanets.activity;import android.content.Intent;import android.os.Bundle;import android.support.v4.app.FragmentActivity;import android.support.v4.view.ViewPager;import android.view.View;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.Spinner;import info.goodline.starsandplanets.R;import info.goodline.starsandplanets.adapter.SpaceBodyViewPagerAdapter;import info.goodline.starsandplanets.data.SpaceBody;import info.goodline.starsandplanets.fragments.Callbacks;import info.goodline.starsandplanets.fragments.DeleteListItemCallbackListener;import info.goodline.starsandplanets.fragments.FragmentSpaceBodyDetail;import info.goodline.starsandplanets.fragments.FragmentSpaceBodyExpandableList;import info.goodline.starsandplanets.fragments.FragmentSpaceBodyList;/** * An activity representing a list of spaceBodies. This activity * has different presentations for handset and tablet-size devices. On * handsets, the activity presents a list of items, which when touched, * lead to a {@link ActivitySpaceBodyDetail} representing * item details. On tablets, the activity presents the list of items and * item details side-by-side using two vertical panes. * <p> * The activity makes heavy use of fragments. The list of items is a * {@link FragmentSpaceBodyList} and the item details * (if present) is a {@link FragmentSpaceBodyDetail}. * <p> * This activity also implements the required * {@link Callbacks} interface * to listen for item selections. */public class ActivitySpaceBodyList extends FragmentActivity        implements Callbacks, AdapterView.OnItemSelectedListener,DeleteListItemCallbackListener {    /**     * Whether or not the activity is in two-pane mode, i.e. running on a tablet     * device or landscape orientation.     */    private boolean mTwoPane;    private Spinner mSpinner;    private boolean isExpandableList =false;    private ListStateChangeListener mListVisibilityCallback;    private ListStateChangeListener mExpListVisibilityCallback;    private ViewPagerCallback mViewPagerCallback;    private ViewPager mViewPager;    private SpaceBodyViewPagerAdapter mSpaceBodyViewPagerAdapter;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_spacebody_list);        mSpinner = (Spinner) findViewById(R.id.spinnerList);        if (mSpinner != null) {        // Create an ArrayAdapter using the string array and a default spinner layout        ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this,                R.array.spinner_values, android.R.layout.simple_spinner_item);        // Specify the layout to use when the list of choices appears        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);        mSpinner.setOnItemSelectedListener(this);        mSpinner.setAdapter(adapter);        }        if (findViewById(R.id.spacebody_detail_viewpager) != null) {            // The detail container view will be present only in the            // large-screen layouts (res/values-large and            // res/values-sw600dp). If this view is present, then the            // activity should be in two-pane mode.            mTwoPane = true;            initViewPager();            // 'activated' state when touched.            FragmentSpaceBodyList listfragment = (FragmentSpaceBodyList) getSupportFragmentManager()                    .findFragmentById(R.id.spacebody_list);            listfragment.setActivateOnItemClick(true);            FragmentSpaceBodyExpandableList expListFragment = ((FragmentSpaceBodyExpandableList) getSupportFragmentManager()                    .findFragmentById(R.id.spacebody_expandable_list));            expListFragment.setActivateOnItemClick(true);            mListVisibilityCallback = (ListStateChangeListener)listfragment;            mExpListVisibilityCallback = (ListStateChangeListener)expListFragment;            expListFragment.getView().setVisibility(View.GONE);        }    }    /**     *  Create new instance of ViewPager and set {@link SpaceBodyViewPagerAdapter} to it     */    private void initViewPager() {        mViewPager= (ViewPager)findViewById(R.id.spacebody_detail_viewpager);        mSpaceBodyViewPagerAdapter = new SpaceBodyViewPagerAdapter(getSupportFragmentManager(), this);        mViewPager.setAdapter(mSpaceBodyViewPagerAdapter);        mViewPager.setOnPageChangeListener(new ViewPager.OnPageChangeListener() {            @Override            public void onPageSelected(int position) {                if(isExpandableList){                    mExpListVisibilityCallback.setCurrentItem(position);                }else{                    mListVisibilityCallback.setCurrentItem(position);                }            }            @Override            public void onPageScrolled(int position, float positionOffset,                                       int positionOffsetPixels) {            }            @Override            public void onPageScrollStateChanged(int state) {            }        });    }    /**     * Callback method from {@link Callbacks}     * indicating that the item with the given ID was selected.     */    @Override    public void onItemSelected(int id) {        if (mTwoPane) {            // In two-pane mode, show the detail view in this activity by            // adding or replacing the detail fragment using a            // fragment transaction.            mViewPager.setCurrentItem(id);        } else {            // In single-pane mode, simply start the detail activity            // for the selected item ID.            Intent detailIntent = new Intent(this, ActivitySpaceBodyDetail.class);            detailIntent.putExtra(FragmentSpaceBodyDetail.URL_ID, id);            startActivity(detailIntent);        }    }    @Override    public void sendFavoriteSpaceBody(SpaceBody favoriteSpaceBody) {        mSpaceBodyViewPagerAdapter.setFavorite(favoriteSpaceBody);        mViewPager.setAdapter(null );        mViewPager.setAdapter(mSpaceBodyViewPagerAdapter);        mSpaceBodyViewPagerAdapter.notifyDataSetChanged();    }    @Override    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {      switch (position){          case 0:              if(isExpandableList){                  mListVisibilityCallback.changeViewVisibility(View.VISIBLE);                  mExpListVisibilityCallback.changeViewVisibility(View.GONE);                  isExpandableList =false;              }              break;          case 1:              if(!isExpandableList){                  mExpListVisibilityCallback.changeViewVisibility(View.VISIBLE);                  mListVisibilityCallback.changeViewVisibility(View.GONE);                  isExpandableList =true;              }              break;      }    }    @Override    public void onNothingSelected(AdapterView<?> parent) {    }    @Override    public void deleteFromOtherList(SpaceBody id) {        //reverse logic cause we need delete from OTHER LIST )        if(isExpandableList){            mSpaceBodyViewPagerAdapter.deleteItem(id);            mListVisibilityCallback.deleteItem(id);        }else {            mSpaceBodyViewPagerAdapter.deleteItem(id);            mExpListVisibilityCallback.deleteItem(id);        }    }}